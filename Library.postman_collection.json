{
	"info": {
		"_postman_id": "5d80f610-8f68-4831-9470-3eecafee268b",
		"name": "Library",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27278060",
		"_collection_link": "https://www.postman.com/joint-operations-administrator-84997214/workspace/automation-testing/collection/27278060-5d80f610-8f68-4831-9470-3eecafee268b?action=share&creator=27278060&source=collection_link"
	},
	"item": [
		{
			"name": "AddBook",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.globals.get(\"companyCode\"))\r",
							"const code = pm.globals.get(\"companyCode\")\r",
							"const val = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"pm.collectionVariables.set(\"ISBN\", code + val);\r",
							"pm.collectionVariables.set(\"Author-name\", pm.iterationData.get(\"Authors\"));\r",
							"console.log(pm.collectionVariables.get(\"Author-name\"));\r",
							"pm.collectionVariables.set(\"Book_name\", pm.iterationData.get(\"Allbooks\"));\r",
							"console.log(pm.collectionVariables.get(\"Book_name\"));\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Success Status code 200', function(){\r",
							"pm.response.to.have.status(200);\r",
							"})\r",
							"const JsonData = pm.response.json();\r",
							"pm.test('property is msg', function(){\r",
							"pm.expect(JsonData).have.property(\"Msg\");\r",
							"})\r",
							"pm.test('keyvalue validated', function(){\r",
							"pm.expect(JsonData.Msg).to.eql(\"successfully added\");\r",
							"})\r",
							"pm.test('content type header', function(){\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"})\r",
							"pm.test('content-type value validated', function(){\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json;charset=UTF-8\")\r",
							"})\r",
							"pm.test('response time validated', function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"})\r",
							"pm.test('any text from the body', function(){\r",
							"    pm.expect(pm.response.text()).to.include(\"successfully added\");\r",
							"})\r",
							"const Bid = JsonData.ID;\r",
							"pm.environment.set(\"book_id\",Bid);\r",
							"\r",
							"const isbn_val = pm.collectionVariables.get(\"ISBN\");\r",
							"var req = JSON.parse(pm.request.body.raw);\r",
							"const aisle_no = req.aisle; \r",
							"const expect_id = isbn_val + aisle_no;\r",
							"pm.test(\"ID Logic Validated\", function(){\r",
							"    pm.expect(expect_id).to.eql(pm.environment.get(\"book_id\"));\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\r\n\"name\":\"{{Book_name}}\",\r\n\"isbn\":\"{{ISBN}}\",\r\n\"aisle\":\"264\",\r\n\"author\":\"{{Author-name}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/Addbook.php",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"Addbook.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBooks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const JsonResponse = pm.response.json();\r",
							"pm.test('Author Vaildated', function(){\r",
							"pm.expect(JsonResponse[0].author).to.eql(pm.collectionVariables.get(\"Author-name\"));\r",
							"})\r",
							"pm.test(\"ISBN Validated\", function(){\r",
							"    pm.expect(JsonResponse[0].isbn).to.eql(pm.collectionVariables.get(\"ISBN\"));\r",
							"})\r",
							"const schmeaVar = {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"book_name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"isbn\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"aisle\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"author\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"book_name\",\r",
							"        \"isbn\",\r",
							"        \"aisle\",\r",
							"        \"author\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"pm.test(\"Schema is validated\", function(){\r",
							"    pm.response.to.have.jsonSchema(schmeaVar);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/Library/GetBook.php?ID={{book_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"GetBook.php"
					],
					"query": [
						{
							"key": "ID",
							"value": "{{book_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DelBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const container = pm.response.json();\r",
							"pm.test(\"Delete msg validated\", function(){\r",
							"pm.expect(container.msg).to.eql(\"book is successfully deleted\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \r\n\"ID\" : \"{{book_id}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/DeleteBook.php",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"DeleteBook.php"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "ISBN",
			"value": ""
		},
		{
			"key": "Author-name",
			"value": ""
		},
		{
			"key": "Book_name",
			"value": ""
		}
	]
}